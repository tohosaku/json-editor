// Generated by dts-bundle-generator v5.9.0

declare class Validator {
	constructor(jsoneditor: any, schema: any, options: any, defaults: any);
	jsoneditor: any;
	schema: any;
	options: any;
	translate: any;
	translateProperty: any;
	defaults: any;
	_validateSubSchema: {
		const(schema: any, value: any, path: any): any;
		enum(schema: any, value: any, path: any): any;
		extends(schema: any, value: any, path: any): any;
		allOf(schema: any, value: any, path: any): any;
		anyOf(schema: any, value: any, path: any): {
			path: any;
			property: string;
			message: any;
		}[];
		oneOf(schema: any, value: any, path: any): any[];
		not(schema: any, value: any, path: any): {
			path: any;
			property: string;
			message: any;
		}[];
		type(schema: any, value: any, path: any): {
			path: any;
			property: string;
			message: any;
		}[];
		disallow(schema: any, value: any, path: any): any;
	};
	_validateNumberSubSchema: {
		multipleOf(schema: any, value: any, path: any): any;
		divisibleBy(schema: any, value: any, path: any): any;
		maximum(schema: any, value: any, path: any): any;
		minimum(schema: any, value: any, path: any): any;
	};
	_validateStringSubSchema: {
		maxLength(schema: any, value: any, path: any): any;
		minLength(schema: any, value: any, path: any): any;
		pattern(schema: any, value: any, path: any): any;
	};
	_validateArraySubSchema: {
		items(schema: any, value: any, path: any): any;
		maxItems(schema: any, value: any, path: any): any;
		minItems(schema: any, value: any, path: any): any;
		uniqueItems(schema: any, value: any, path: any): any;
	};
	_validateObjectSubSchema: {
		maxProperties(schema: any, value: any, path: any): any;
		minProperties(schema: any, value: any, path: any): any;
		required(schema: any, value: any, path: any): any[];
		properties(schema: any, value: any, path: any, validatedProperties: any): any[];
		patternProperties(schema: any, value: any, path: any, validatedProperties: any): any[];
	};
	_validateObjectSubSchema2: {
		propertyNames(schema: any, value: any, path: any, validatedProperties: any): any;
		additionalProperties(schema: any, value: any, path: any, validatedProperties: any): any;
		dependencies(schema: any, value: any, path: any): any[];
	};
	fitTest(value: any, givenSchema: any, weight?: number): {
		match: number;
		extra: number;
	};
	_getSchema(schema: any): any;
	validate(value: any): any;
	_validateSchema(schema: any, value: any, path: any): any;
	_expandSchemaLink(schema: any, m: any): any;
	_validateV3Required(schema: any, value: any, path: any): {
		path: any;
		property: string;
		message: any;
	}[];
	_validateByValueType(schema: any, value: any, path: any): any[];
	_validateUUIDSchema(schema: any, value: any, path: any): {
		path: any;
		property: string;
		message: any;
	}[];
	_validateNumberSubSchemaMultipleDivisible(schema: any, value: any, path: any): {
		path: any;
		property: string;
		message: any;
	}[];
	_validateDateTimeSubSchema(schema: any, value: any, path: any): {
		path: any;
		property: string;
		message: any;
	}[];
	_validateCustomValidator(schema: any, value: any, path: any): {
		path: any;
		property: string;
		message: any;
	}[];
	_removeDuplicateErrors(errors: any): any;
	_checkType(type: any, value: any): any;
}
declare const resolvers: ((schema: any) => any)[];
export namespace defaults {
	export { options };
	export { theme };
	export { template };
	export { themes };
	export { callbacks };
	export { templates };
	export { iconlibs };
	export { editors };
	export { languages };
	export { resolvers };
	export { custom_validators };
	export { default_language };
	export { language };
	export { translate };
	export { translateProperty };
}
export declare namespace options {
	export { upload };
	export const prompt_before_delete: boolean;
	export const use_default_values: boolean;
	export const max_depth: number;
}
declare const theme: "html";
declare const template: "default";
declare const themes: {};
declare const callbacks: {};
declare const templates: {};
declare const iconlibs: {};
declare const editors: {};
export declare namespace languages {
	namespace en {
		const error_notset: string;
		const error_notempty: string;
		const error_enum: string;
		const error_const: string;
		const error_anyOf: string;
		const error_oneOf: string;
		const error_not: string;
		const error_type_union: string;
		const error_type: string;
		const error_disallow_union: string;
		const error_disallow: string;
		const error_multipleOf: string;
		const error_maximum_excl: string;
		const error_maximum_incl: string;
		const error_minimum_excl: string;
		const error_minimum_incl: string;
		const error_maxLength: string;
		const error_minLength: string;
		const error_pattern: string;
		const error_additionalItems: string;
		const error_maxItems: string;
		const error_minItems: string;
		const error_uniqueItems: string;
		const error_maxProperties: string;
		const error_minProperties: string;
		const error_required: string;
		const error_additional_properties: string;
		const error_property_names_exceeds_maxlength: string;
		const error_property_names_enum_mismatch: string;
		const error_property_names_const_mismatch: string;
		const error_property_names_pattern_mismatch: string;
		const error_property_names_false: string;
		const error_property_names_maxlength: string;
		const error_property_names_enum: string;
		const error_property_names_pattern: string;
		const error_property_names_unsupported: string;
		const error_dependency: string;
		const error_date: string;
		const error_time: string;
		const error_datetime_local: string;
		const error_invalid_epoch: string;
		const error_ipv4: string;
		const error_ipv6: string;
		const error_hostname: string;
		const button_save: string;
		const button_copy: string;
		const button_cancel: string;
		const button_add: string;
		const button_delete_all: string;
		const button_delete_all_title: string;
		const button_delete_last: string;
		const button_delete_last_title: string;
		const button_add_row_title: string;
		const button_move_down_title: string;
		const button_move_up_title: string;
		const button_properties: string;
		const button_object_properties: string;
		const button_copy_row_title: string;
		const button_delete_row_title: string;
		const button_delete_row_title_short: string;
		const button_copy_row_title_short: string;
		const button_collapse: string;
		const button_expand: string;
		const button_edit_json: string;
		const button_upload: string;
		const flatpickr_toggle_button: string;
		const flatpickr_clear_button: string;
		const choices_placeholder_text: string;
		const default_array_item_title: string;
		const button_delete_node_warning: string;
	}
}
declare let custom_validators: any[];
declare const default_language: "en";
declare const language: "en";
declare function translate(key: any, variables: any): any;
declare function translateProperty(text: any, variables: any): any;
declare function upload(type: any, file: any, cbs: any): void;
declare class AbstractEditor {
	constructor(options: any, defaults: any);
	defaults: any;
	jsoneditor: any;
	theme: any;
	template_engine: any;
	iconlib: any;
	translate: any;
	translateProperty: any;
	original_schema: any;
	schema: any;
	active: boolean;
	options: any;
	formname: any;
	path: any;
	parent: any;
	key: any;
	link_watchers: any[];
	watchLoop: boolean;
	onChildEditorChange(editor: any): void;
	notify(): void;
	change(): void;
	onChange(bubble: any): void;
	register(): void;
	unregister(): void;
	getNumColumns(): number;
	isActive(): boolean;
	activate(): void;
	deactivate(): void;
	registerDependencies(): void;
	dependenciesFulfilled: any;
	evaluateDependencies(): void;
	checkDependency(path: any, choices: any): void;
	setContainer(container: any): void;
	container: any;
	setOptInCheckbox(header: any): void;
	optInCheckbox: HTMLInputElement | undefined;
	preBuild(): void;
	build(): void;
	postBuild(): void;
	setupWatchListeners(): void;
	watched: {} | null | undefined;
	watched_values: {} | null | undefined;
	watch_listener: (() => void) | null | undefined;
	header_template: any;
	addLinks(): void;
	link_holder: any;
	onMove(): void;
	getButton(text: any, icon: any, title: any, args?: any[]): any;
	setButtonText(button: any, text: any, icon: any, title: any, args?: any[]): any;
	addLink(link: any): void;
	getLink(data: any): any;
	refreshWatchedFieldValues(): boolean | undefined;
	getWatchedFieldValues(): {} | null | undefined;
	updateHeaderText(): void;
	getHeaderText(titleOnly: any): any;
	getPathDepth(): any;
	cleanText(txt: any): string;
	onWatchedFieldChange(): void;
	header_text: any;
	setValue(value: any): void;
	value: any;
	getValue(): any;
	refreshValue(): void;
	getChildEditors(): boolean;
	destroy(): void;
	isDefaultRequired(): any;
	getDefault(): any;
	getTitle(): any;
	enable(): void;
	disabled: boolean | undefined;
	disable(): void;
	isEnabled(): boolean;
	isRequired(): any;
	getDisplayText(arr: any): any[];
	getValidId(id: any): any;
	setInputAttributes(inputAttribute: any): void;
	expandCallbacks(scope: any, options: any): any;
	showValidationErrors(errors: any): void;
}
declare class AbstractTheme {
	constructor(jsoneditor: any, options?: {
		disable_theme_rules: boolean;
	});
	jsoneditor: any;
	options: {
		disable_theme_rules: boolean;
	};
	getContainer(): HTMLDivElement;
	getFloatRightLinkHolder(): HTMLDivElement;
	getModal(): HTMLDivElement;
	getGridContainer(): HTMLDivElement;
	getGridRow(): HTMLDivElement;
	getGridColumn(): HTMLDivElement;
	setGridColumnSize(el: any, size: any): void;
	getLink(text: any): HTMLAnchorElement;
	disableHeader(header: any): void;
	disableLabel(label: any): void;
	enableHeader(header: any): void;
	enableLabel(label: any): void;
	getInfoButton(text: any): HTMLSpanElement;
	getFormInputLabel(text: any, req: any): HTMLLabelElement;
	getHeader(text: any, pathDepth: any): HTMLHeadingElement;
	getCheckbox(): HTMLInputElement;
	getCheckboxLabel(text: any, req: any): HTMLLabelElement;
	getMultiCheckboxHolder(controls: any, label: any, description: any, infoText: any): HTMLDivElement;
	getFormCheckboxControl(label: any, input: any, compact: any): HTMLDivElement;
	getFormRadio(attributes: any): HTMLInputElement;
	getFormRadioLabel(text: any, req: any): HTMLLabelElement;
	getFormRadioControl(label: any, input: any, compact: any): HTMLDivElement;
	getSelectInput(options: any, multiple: any): HTMLSelectElement;
	getSwitcher(options: any): HTMLSelectElement;
	getSwitcherOptions(switcher: any): any;
	setSwitcherOptions(switcher: any, options: any, titles: any): void;
	setSelectOptions(select: any, options: any, titles?: any[]): void;
	getTextareaInput(): HTMLTextAreaElement;
	getRangeInput(min: any, max: any, step: any): HTMLInputElement;
	getStepperButtons(input: any): HTMLDivElement;
	getRangeOutput(input: any, startvalue: any): HTMLOutputElement;
	getRangeControl(input: any, output: any): HTMLDivElement;
	getFormInputField(type: any): HTMLInputElement;
	afterInputReady(input: any): void;
	getFormControl(label: any, input: any, description: any, infoText: any): HTMLDivElement;
	getIndentedPanel(): HTMLDivElement;
	getTopIndentedPanel(): HTMLDivElement;
	getChildEditorHolder(): HTMLDivElement;
	getDescription(text: any): HTMLParagraphElement;
	getCheckboxDescription(text: any): HTMLParagraphElement;
	getFormInputDescription(text: any): HTMLParagraphElement;
	getButtonHolder(): HTMLSpanElement;
	getHeaderButtonHolder(): HTMLSpanElement;
	getFormButtonHolder(buttonAlign: any): HTMLSpanElement;
	getButton(text: any, icon: any, title: any): HTMLButtonElement;
	getFormButton(text: any, icon: any, title: any): HTMLButtonElement;
	setButtonText(button: any, text: any, icon: any, title: any): void;
	getTable(): HTMLTableElement;
	getTableRow(): HTMLTableRowElement;
	getTableHead(): HTMLTableSectionElement;
	getTableBody(): HTMLTableSectionElement;
	getTableHeaderCell(text: any): HTMLTableHeaderCellElement;
	getTableCell(): HTMLTableDataCellElement;
	getErrorMessage(text: any): HTMLParagraphElement;
	addInputError(input: any, text: any): void;
	removeInputError(input: any): void;
	addTableRowError(row: any): void;
	removeTableRowError(row: any): void;
	getTabHolder(propertyName: any): HTMLDivElement;
	getTopTabHolder(propertyName: any): HTMLDivElement;
	applyStyles(el: any, styles: any): void;
	closest(elem: any, selector: any): any;
	insertBasicTopTab(tab: any, newTabsHolder: any): void;
	getTab(span: any, tabId: any): HTMLDivElement;
	getTopTab(span: any, tabId: any): HTMLDivElement;
	getTabContentHolder(tabHolder: any): any;
	getTopTabContentHolder(tabHolder: any): any;
	getTabContent(): HTMLDivElement;
	getTopTabContent(): HTMLDivElement;
	markTabActive(row: any): void;
	markTabInactive(row: any): void;
	addTab(holder: any, tab: any): void;
	addTopTab(holder: any, tab: any): void;
	getBlockLink(): HTMLAnchorElement;
	getBlockLinkHolder(): HTMLDivElement;
	getLinksHolder(): HTMLDivElement;
	createMediaLink(holder: any, link: any, media: any): void;
	createImageLink(holder: any, link: any, image: any): void;
	getFirstTab(holder: any): any;
	getInputGroup(input: any, buttons: any): undefined;
	cleanText(txt: any): string;
	getDropZone(text: any): HTMLDivElement;
	getUploadPreview(file: any, uploadButton: any, data: any): HTMLDivElement;
	getProgressBar(): HTMLProgressElement;
	updateProgressBar(progressBar: any, progress: any): void;
	updateProgressBarUnknown(progressBar: any): void;
}
declare class AbstractIconLib {
	constructor(iconPrefix?: string, mapping?: {
		collapse: string;
		expand: string;
		delete: string;
		edit: string;
		add: string;
		cancel: string;
		save: string;
		moveup: string;
		movedown: string;
	});
	mapping: {
		collapse: string;
		expand: string;
		delete: string;
		edit: string;
		add: string;
		cancel: string;
		save: string;
		moveup: string;
		movedown: string;
	};
	icon_prefix: string;
	getIconClass(key: any): string | null;
	getIcon(key: any): HTMLElement | null;
}
export class JSONEditor {
	constructor(element: any, options?: {});
	element: Element;
	options: any;
	ready: boolean;
	copyClipboard: any;
	schema: any;
	template: any;
	translate: any;
	translateProperty: any;
	uuid: number;
	__data: {};
	theme: any;
	iconlib: any;
	root_container: any;
	expandSchema: (schema: any, fileBase: any) => any;
	expandRefs: (schema: any, fileBase: any) => any;
	refs: any;
	validator: Validator;
	root: any;
	validation_results: any;
	getValue(): any;
	setValue(value: any): JSONEditor;
	validate(value: any, ...args: any[]): any;
	destroy(): void;
	destroyed: boolean | undefined;
	on(event: any, callback: any): JSONEditor;
	callbacks: any;
	off(event: any, callback: any): JSONEditor;
	trigger(event: any, editor: any): JSONEditor;
	setOption(option: any, value: any): JSONEditor;
	getEditorsRules(): any;
	getEditorClass(schema: any): never;
	createEditor(editorClass: any, options: any, depthCounter?: number): any;
	onChange(): JSONEditor | undefined;
	firing_change: boolean | undefined;
	compileTemplate(template: any, name?: string): any;
	_data(el: any, key: any, value: any, ...args: any[]): any;
	registerEditor(editor: any): JSONEditor;
	editors: any;
	unregisterEditor(editor: any): JSONEditor;
	getEditor(path: any): any;
	watch(path: any, callback: any): JSONEditor;
	watchlist: any;
	unwatch(path: any, callback: any): JSONEditor;
	notifyWatchers(path: any): JSONEditor | undefined;
	isEnabled(): any;
	enable(): void;
	disable(): void;
	setCopyClipboardContents(value: any): void;
	getCopyClipboardContents(): any;
	addNewStyleRules(themeName: any, rules: any): void;
	addNewStyleRulesToShadowRoot(themeName: any, rules: any, shadowRoot: any): void;
}
export namespace JSONEditor {
	export { defaults };
	export { AbstractEditor };
	export { AbstractTheme };
	export { AbstractIconLib };
}

export {};
