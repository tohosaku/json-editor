// Generated by dts-bundle-generator v4.3.0

declare class Validator {
	constructor(jsoneditor: any, schema: any, options: any, defaults: any);
	jsoneditor: any;
	schema: any;
	options: any;
	translate: any;
	defaults: any;
	/**
	 * @private
	 */
	private _validateSubSchema;
	/**
	 * @private
	 */
	private _validateNumberSubSchema;
	/**
	 * @private
	 */
	private _validateStringSubSchema;
	/**
	 * @private
	 */
	private _validateArraySubSchema;
	/**
	 * @private
	 */
	private _validateObjectSubSchema;
	/**
	 * @private
	 */
	private _validateObjectSubSchema2;
	fitTest(value: any, givenSchema: any, weight?: number): {
		match: number;
		extra: number;
	};
	/**
	  * @private
	  */
	private _getSchema;
	validate(value: any): any;
	/**
	  * @private
	  */
	private _validateSchema;
	/**
	  * @private
	  */
	private _expandSchemaLink;
	/**
	  * @private
	  */
	private _validateV3Required;
	/**
	  * @private
	  */
	private _validateByValueType;
	/**
	  * @private
	  */
	private _validateNumberSubSchemaMultipleDivisible;
	/**
	  * @private
	  */
	private _validateDateTimeSubSchema;
	/**
	  * @private
	  */
	private _validateCustomValidator;
	/**
	  * @private
	  */
	private _removeDuplicateErrors;
	/**
	  * @private
	  */
	private _checkType;
}
declare const resolvers: ((schema: any) => any)[];
export namespace defaults {
	export { options };
	export { theme };
	export { template };
	export { themes };
	export { callbacks };
	export { templates };
	export { iconlibs };
	export { editors };
	export { languages };
	export { resolvers };
	export { custom_validators };
	export { default_language };
	export { language };
	export { translate };
}
export declare namespace options {
	export { upload };
	export const prompt_before_delete: boolean;
}
declare const theme: "html";
declare const template: "default";
declare const themes: {};
declare const callbacks: {};
declare const templates: {};
declare const iconlibs: {};
declare const editors: {};
export declare namespace languages {
	export namespace en {
		export const error_notset: string;
		export const error_notempty: string;
		export const error_enum: string;
		export const error_anyOf: string;
		export const error_oneOf: string;
		export const error_not: string;
		export const error_type_union: string;
		export const error_type: string;
		export const error_disallow_union: string;
		export const error_disallow: string;
		export const error_multipleOf: string;
		export const error_maximum_excl: string;
		export const error_maximum_incl: string;
		export const error_minimum_excl: string;
		export const error_minimum_incl: string;
		export const error_maxLength: string;
		export const error_minLength: string;
		export const error_pattern: string;
		export const error_additionalItems: string;
		export const error_maxItems: string;
		export const error_minItems: string;
		export const error_uniqueItems: string;
		export const error_maxProperties: string;
		export const error_minProperties: string;
		export const error_required: string;
		export const error_additional_properties: string;
		export const error_dependency: string;
		export const error_date: string;
		export const error_time: string;
		export const error_datetime_local: string;
		export const error_invalid_epoch: string;
		export const error_ipv4: string;
		export const error_ipv6: string;
		export const error_hostname: string;
		export const button_delete_all: string;
		export const button_delete_all_title: string;
		export const button_delete_last: string;
		export const button_delete_last_title: string;
		export const button_add_row_title: string;
		export const button_move_down_title: string;
		export const button_move_up_title: string;
		export const button_object_properties: string;
		export const button_delete_row_title: string;
		export const button_delete_row_title_short: string;
		export const button_copy_row_title_short: string;
		export const button_collapse: string;
		export const button_expand: string;
		export const flatpickr_toggle_button: string;
		export const flatpickr_clear_button: string;
		export const choices_placeholder_text: string;
		export const default_array_item_title: string;
	}
}
declare let custom_validators: any[];
declare const default_language: "en";
declare const language: "en";
declare function translate(key: any, variables: any): any;
declare function upload(type: any, file: any, cbs: any): void;
declare class AbstractEditor {
	constructor(options: any, defaults: any);
	defaults: any;
	jsoneditor: any;
	theme: any;
	template_engine: any;
	iconlib: any;
	translate: any;
	original_schema: any;
	schema: any;
	active: boolean;
	options: any;
	path: any;
	formname: any;
	parent: any;
	key: any;
	link_watchers: any[];
	watchLoop: boolean;
	onChildEditorChange(editor: any): void;
	notify(): void;
	change(): void;
	onChange(bubble: any): void;
	register(): void;
	unregister(): void;
	getNumColumns(): number;
	isActive(): boolean;
	activate(): void;
	deactivate(): void;
	registerDependencies(): void;
	dependenciesFulfilled: any;
	checkDependency(path: any, choices: any): void;
	setContainer(container: any): void;
	container: any;
	setOptInCheckbox(header: any): void;
	optInCheckbox: HTMLInputElement | undefined;
	preBuild(): void;
	build(): void;
	postBuild(): void;
	setupWatchListeners(): void;
	watched: {} | null | undefined;
	watched_values: {} | null | undefined;
	watch_listener: (() => void) | null | undefined;
	header_template: any;
	addLinks(): void;
	link_holder: any;
	onMove(): void;
	getButton(text: any, icon: any, title: any): any;
	setButtonText(button: any, text: any, icon: any, title: any): any;
	addLink(link: any): void;
	getLink(data: any): any;
	refreshWatchedFieldValues(): boolean | undefined;
	getWatchedFieldValues(): {} | null | undefined;
	updateHeaderText(): void;
	getHeaderText(titleOnly: any): any;
	cleanText(txt: any): string;
	onWatchedFieldChange(): void;
	header_text: any;
	setValue(value: any): void;
	value: any;
	getValue(): any;
	refreshValue(): void;
	getChildEditors(): boolean;
	destroy(): void;
	getDefault(): any;
	getTitle(): any;
	enable(): void;
	disabled: boolean | undefined;
	disable(): void;
	isEnabled(): boolean;
	isRequired(): any;
	getDisplayText(arr: any): any[];
	getValidId(id: any): any;
	setInputAttributes(inputAttribute: any): void;
	expandCallbacks(scope: any, options: any): any;
	showValidationErrors(errors: any): void;
}
declare class AbstractTheme {
	constructor(jsoneditor: any, options?: {
		disable_theme_rules: boolean;
	});
	jsoneditor: any;
	options: {
		disable_theme_rules: boolean;
	};
	getContainer(): HTMLDivElement;
	getFloatRightLinkHolder(): HTMLDivElement;
	getModal(): HTMLDivElement;
	getGridContainer(): HTMLDivElement;
	getGridRow(): HTMLDivElement;
	getGridColumn(): HTMLDivElement;
	setGridColumnSize(el: any, size: any): void;
	getLink(text: any): HTMLAnchorElement;
	disableHeader(header: any): void;
	disableLabel(label: any): void;
	enableHeader(header: any): void;
	enableLabel(label: any): void;
	getInfoButton(text: any): HTMLSpanElement;
	getFormInputLabel(text: any, req: any): HTMLLabelElement;
	getHeader(text: any): HTMLHeadingElement;
	getCheckbox(): HTMLInputElement;
	getCheckboxLabel(text: any, req: any): HTMLLabelElement;
	getMultiCheckboxHolder(controls: any, label: any, description: any, infoText: any): HTMLDivElement;
	getFormCheckboxControl(label: any, input: any, compact: any): HTMLDivElement;
	getFormRadio(attributes: any): HTMLInputElement;
	getFormRadioLabel(text: any, req: any): HTMLLabelElement;
	getFormRadioControl(label: any, input: any, compact: any): HTMLDivElement;
	getSelectInput(options: any, multiple: any): HTMLSelectElement;
	getSwitcher(options: any): HTMLSelectElement;
	getSwitcherOptions(switcher: any): any;
	setSwitcherOptions(switcher: any, options: any, titles: any): void;
	setSelectOptions(select: any, options: any, titles?: any[]): void;
	getTextareaInput(): HTMLTextAreaElement;
	getRangeInput(min: any, max: any, step: any): HTMLInputElement;
	getRangeOutput(input: any, startvalue: any): HTMLOutputElement;
	getRangeControl(input: any, output: any): HTMLDivElement;
	getFormInputField(type: any): HTMLInputElement;
	afterInputReady(input: any): void;
	getFormControl(label: any, input: any, description: any, infoText: any): HTMLDivElement;
	getIndentedPanel(): HTMLDivElement;
	getTopIndentedPanel(): HTMLDivElement;
	getChildEditorHolder(): HTMLDivElement;
	getDescription(text: any): HTMLParagraphElement;
	getCheckboxDescription(text: any): HTMLParagraphElement;
	getFormInputDescription(text: any): HTMLParagraphElement;
	getButtonHolder(): HTMLSpanElement;
	getHeaderButtonHolder(): HTMLSpanElement;
	getFormButtonHolder(buttonAlign: any): HTMLSpanElement;
	getButton(text: any, icon: any, title: any): HTMLButtonElement;
	getFormButton(text: any, icon: any, title: any): HTMLButtonElement;
	setButtonText(button: any, text: any, icon: any, title: any): void;
	getTable(): HTMLTableElement;
	getTableRow(): HTMLTableRowElement;
	getTableHead(): HTMLTableSectionElement;
	getTableBody(): HTMLTableSectionElement;
	getTableHeaderCell(text: any): HTMLTableHeaderCellElement;
	getTableCell(): HTMLTableDataCellElement;
	getErrorMessage(text: any): HTMLParagraphElement;
	addInputError(input: any, text: any): void;
	removeInputError(input: any): void;
	addTableRowError(row: any): void;
	removeTableRowError(row: any): void;
	getTabHolder(propertyName: any): HTMLDivElement;
	getTopTabHolder(propertyName: any): HTMLDivElement;
	applyStyles(el: any, styles: any): void;
	closest(elem: any, selector: any): any;
	insertBasicTopTab(tab: any, newTabsHolder: any): void;
	getTab(span: any, tabId: any): HTMLDivElement;
	getTopTab(span: any, tabId: any): HTMLDivElement;
	getTabContentHolder(tabHolder: any): any;
	getTopTabContentHolder(tabHolder: any): any;
	getTabContent(): HTMLDivElement;
	getTopTabContent(): HTMLDivElement;
	markTabActive(row: any): void;
	markTabInactive(row: any): void;
	addTab(holder: any, tab: any): void;
	addTopTab(holder: any, tab: any): void;
	getBlockLink(): HTMLAnchorElement;
	getBlockLinkHolder(): HTMLDivElement;
	getLinksHolder(): HTMLDivElement;
	createMediaLink(holder: any, link: any, media: any): void;
	createImageLink(holder: any, link: any, image: any): void;
	getFirstTab(holder: any): any;
	getInputGroup(input: any, buttons: any): undefined;
	cleanText(txt: any): string;
	getDropZone(text: any): HTMLDivElement;
	getUploadPreview(file: any, uploadButton: any, data: any): HTMLDivElement;
	getProgressBar(): HTMLProgressElement;
	updateProgressBar(progressBar: any, progress: any): void;
	updateProgressBarUnknown(progressBar: any): void;
}
declare namespace AbstractTheme {
	export const rules: {
		'.je-upload-preview img': string;
	};
}
declare class AbstractIconLib {
	constructor(iconPrefix?: string, mapping?: {
		collapse: string;
		expand: string;
		delete: string;
		edit: string;
		add: string;
		cancel: string;
		save: string;
		moveup: string;
		movedown: string;
	});
	mapping: {
		collapse: string;
		expand: string;
		delete: string;
		edit: string;
		add: string;
		cancel: string;
		save: string;
		moveup: string;
		movedown: string;
	};
	icon_prefix: string;
	getIconClass(key: any): string | null;
	getIcon(key: any): HTMLElement | null;
}
export class JSONEditor {
	/**
	 *
	 * @param {HTMLElement} element
	 * @param {*} options
	 */
	constructor(element: HTMLElement, options?: any);
	element: HTMLElement;
	options: any;
	ready: boolean;
	copyClipboard: any;
	schema: any;
	template: any;
	translate: any;
	uuid: number;
	/**
	 * @private
	 */
	private __data;
	theme: any;
	iconlib: any;
	root_container: any;
	expandSchema: (schema: any, fileBase: any) => any;
	expandRefs: (schema: any, fileBase: any) => any;
	refs: any;
	validator: Validator;
	root: any;
	validation_results: any;
	getValue(): any;
	setValue(value: any): JSONEditor;
	validate(value: any, ...args: any[]): any;
	destroy(): void;
	destroyed: boolean | undefined;
	on(event: any, callback: any): JSONEditor;
	callbacks: any;
	off(event: any, callback: any): JSONEditor;
	trigger(event: any, editor: any): JSONEditor;
	setOption(option: any, value: any): JSONEditor;
	getEditorsRules(): any;
	getEditorClass(schema: any): never;
	createEditor(editorClass: any, options: any): any;
	onChange(): JSONEditor | undefined;
	firing_change: boolean | undefined;
	compileTemplate(template: any, name?: string): any;
	/**
	 * @private
	 */
	private _data;
	registerEditor(editor: any): JSONEditor;
	editors: any;
	unregisterEditor(editor: any): JSONEditor;
	/**
	 *
	 * @param {string} path
	 */
	getEditor(path: string): any;
	/**
	 *
	 * @param {string} path
	 * @param {Function} callback
	 */
	watch(path: string, callback: Function): JSONEditor;
	watchlist: any;
	/**
	 *
	 * @param {string} path
	 * @param {Function|undefined} callback
	 */
	unwatch(path: string, callback: Function | undefined): JSONEditor;
	/**
	 *
	 * @param {string} path
	 */
	notifyWatchers(path: string): JSONEditor | undefined;
	/**
	 * @returns {boolean}
	 */
	isEnabled(): boolean;
	enable(): void;
	disable(): void;
	setCopyClipboardContents(value: any): void;
	getCopyClipboardContents(): any;
	/**
	 *
	 * @param {string} themeName
	 * @param {*} rules
	 */
	addNewStyleRules(themeName: string, rules: any): void;
	/**
	 *
	 * @param {string} themeName
	 * @param {*} rules
	 * @param {*} shadowRoot
	 */
	addNewStyleRulesToShadowRoot(themeName: string, rules: any, shadowRoot: any): void;
}
export namespace JSONEditor {
	export { defaults };
	export { AbstractEditor };
	export { AbstractTheme };
	export { AbstractIconLib };
}

export {};
