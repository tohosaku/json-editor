// Generated by dts-bundle-generator v4.3.0

declare class Validator {
  /**
   *
   * @param { JSONEditor } jsoneditor
   * @param {*} schema
   * @param {*} options
   * @param {*} defaults
   */
  constructor(jsoneditor: JSONEditor, schema: any, options: any, defaults: any);
  jsoneditor: JSONEditor;
  schema: any;
  options: any;
  translate: any;
  defaults: any;
  /**
   * @private
   */
  private _validateSubSchema;
  /**
   * @private
   */
  private _validateNumberSubSchema;
  /**
   * @private
   */
  private _validateStringSubSchema;
  /**
   * @private
   */
  private _validateArraySubSchema;
  /**
   * @private
   */
  private _validateObjectSubSchema;
  /**
   * @private
   */
  private _validateObjectSubSchema2;
  fitTest(value: any, givenSchema: any, weight?: number): {
    match: number;
    extra: number;
  };
  /**
    * @private
    */
  private _getSchema;
  validate(value: any): any;
  /**
    * @private
    */
  private _validateSchema;
  /**
    * @private
    */
  private _expandSchemaLink;
  /**
    * @private
    */
  private _validateV3Required;
  /**
    * @private
    */
  private _validateByValueType;
  /**
    * @private
    */
  private _validateUUIDSchema;
  /**
    * @private
    */
  private _validateNumberSubSchemaMultipleDivisible;
  /**
    * @private
    */
  private _validateDateTimeSubSchema;
  /**
    * @private
    */
  private _validateCustomValidator;
  /**
    * @private
    */
  private _removeDuplicateErrors;
  /**
    * @private
    */
  private _checkType;
}
declare class AbstractTheme {
  /**
   *
   * @param {JSONEditor} jsoneditor
   * @param {Object} options
   */
  constructor(jsoneditor: JSONEditor, options?: Object);
  jsoneditor: JSONEditor;
  options: Object;
  getContainer(): HTMLDivElement;
  getFloatRightLinkHolder(): HTMLDivElement;
  getModal(): HTMLDivElement;
  getGridContainer(): HTMLDivElement;
  getGridRow(): HTMLDivElement;
  getGridColumn(): HTMLDivElement;
  setGridColumnSize(el: any, size: any): void;
  getLink(text: any): HTMLAnchorElement;
  disableHeader(header: any): void;
  disableLabel(label: any): void;
  enableHeader(header: any): void;
  enableLabel(label: any): void;
  getInfoButton(text: any): HTMLSpanElement;
  getFormInputLabel(text: any, req: any): HTMLLabelElement;
  getHeader(text: any): HTMLHeadingElement;
  getCheckbox(): HTMLInputElement;
  getCheckboxLabel(text: any, req: any): HTMLLabelElement;
  getMultiCheckboxHolder(controls: any, label: any, description: any, infoText: any): HTMLDivElement;
  getFormCheckboxControl(label: any, input: any, compact: any): HTMLDivElement;
  getFormRadio(attributes: any): HTMLInputElement;
  getFormRadioLabel(text: any, req: any): HTMLLabelElement;
  getFormRadioControl(label: any, input: any, compact: any): HTMLDivElement;
  getSelectInput(options: any, multiple: any): HTMLSelectElement;
  getSwitcher(options: any): HTMLSelectElement;
  getSwitcherOptions(switcher: any): any;
  setSwitcherOptions(switcher: any, options: any, titles: any): void;
  setSelectOptions(select: any, options: any, titles?: any[]): void;
  getTextareaInput(): HTMLTextAreaElement;
  getRangeInput(min: any, max: any, step: any): HTMLInputElement;
  getStepperButtons(input: any): HTMLDivElement;
  getRangeOutput(input: any, startvalue: any): HTMLOutputElement;
  getRangeControl(input: any, output: any): HTMLDivElement;
  getFormInputField(type: any): HTMLInputElement;
  afterInputReady(input: any): void;
  getFormControl(label: any, input: any, description: any, infoText: any): HTMLDivElement;
  getIndentedPanel(): HTMLDivElement;
  getTopIndentedPanel(): HTMLDivElement;
  getChildEditorHolder(): HTMLDivElement;
  getDescription(text: any): HTMLParagraphElement;
  getCheckboxDescription(text: any): HTMLParagraphElement;
  getFormInputDescription(text: any): HTMLParagraphElement;
  getButtonHolder(): HTMLSpanElement;
  getHeaderButtonHolder(): HTMLSpanElement;
  getFormButtonHolder(buttonAlign: any): HTMLSpanElement;
  getButton(text: any, icon: any, title: any): HTMLButtonElement;
  getFormButton(text: any, icon: any, title: any): HTMLButtonElement;
  setButtonText(button: any, text: any, icon: any, title: any): void;
  getTable(): HTMLTableElement;
  getTableRow(): HTMLTableRowElement;
  getTableHead(): HTMLTableSectionElement;
  getTableBody(): HTMLTableSectionElement;
  getTableHeaderCell(text: any): HTMLTableHeaderCellElement;
  getTableCell(): HTMLTableDataCellElement;
  getErrorMessage(text: any): HTMLParagraphElement;
  addInputError(input: any, text: any): void;
  removeInputError(input: any): void;
  addTableRowError(row: any): void;
  removeTableRowError(row: any): void;
  getTabHolder(propertyName: any): HTMLDivElement;
  getTopTabHolder(propertyName: any): HTMLDivElement;
  applyStyles(el: any, styles: any): void;
  closest(elem: any, selector: any): any;
  insertBasicTopTab(tab: any, newTabsHolder: any): void;
  getTab(span: any, tabId: any): HTMLDivElement;
  getTopTab(span: any, tabId: any): HTMLDivElement;
  getTabContentHolder(tabHolder: any): any;
  getTopTabContentHolder(tabHolder: any): any;
  getTabContent(): HTMLDivElement;
  getTopTabContent(): HTMLDivElement;
  markTabActive(row: any): void;
  markTabInactive(row: any): void;
  addTab(holder: any, tab: any): void;
  addTopTab(holder: any, tab: any): void;
  getBlockLink(): HTMLAnchorElement;
  getBlockLinkHolder(): HTMLDivElement;
  getLinksHolder(): HTMLDivElement;
  createMediaLink(holder: any, link: any, media: any): void;
  createImageLink(holder: any, link: any, image: any): void;
  getFirstTab(holder: any): any;
  getInputGroup(input: any, buttons: any): undefined;
  cleanText(txt: any): string;
  getDropZone(text: any): HTMLDivElement;
  getUploadPreview(file: any, uploadButton: any, data: any): HTMLDivElement;
  getProgressBar(): HTMLProgressElement;
  updateProgressBar(progressBar: any, progress: any): void;
  updateProgressBarUnknown(progressBar: any): void;
}
declare class AbstractIconLib {
  /**
   *
   * @param {string} iconPrefix
   * @param {IconlibMapping} mapping
   */
  constructor(iconPrefix?: string, mapping?: IconlibMapping);
  mapping: IconlibMapping;
  icon_prefix: string;
  /**
   *
   * @param {string} key
   */
  getIconClass(key: string): string | null;
  /**
   *
   * @param {string} key
   */
  getIcon(key: string): HTMLElement | null;
}
declare const defaults: Defaults;
export type Languages = {
  [x: string]: {
    /**
     * When a property is not set
     */
    error_notset: string;
    /**
     * When a string must not be empty
     */
    error_notempty: string;
    /**
     * When a value is not one of the enumerated values
     */
    error_enum: string;
    /**
     * When a value doesn't validate any schema of a 'anyOf' combination
     */
    error_anyOf: string;
    /**
     * When a value doesn't validate
     * @variables This key takes one variable: The number of schemas the value does not validate
     */
    error_oneOf: string;
    /**
     * When a value does not validate a 'not' schema
     */
    error_not: string;
    /**
     * When a value does not match any of the provided types
     */
    error_type_union: string;
    /**
     * When a value does not match the given type
     * @variables This key takes one variable: The type the value should be of
     */
    error_type: string;
    /**
     *  When the value validates one of the disallowed types
     */
    error_disallow_union: string;
    /**
     *  When the value validates a disallowed type
     * @variables This key takes one variable: The type the value should not be of
     */
    error_disallow: string;
    /**
     * When a value is not a multiple of or divisible by a given number
     * @variables This key takes one variable: The number mentioned above
     */
    error_multipleOf: string;
    /**
     * When a value is greater than it's supposed to be (exclusive)
     * @variables This key takes one variable: The maximum
     */
    error_maximum_excl: string;
    /**
     * When a value is greater than it's supposed to be (inclusive
     * @variables This key takes one variable: The maximum
     */
    error_maximum_incl: string;
    /**
     * When a value is lesser than it's supposed to be (exclusive)
     * @variables This key takes one variable: The minimum
     */
    error_minimum_excl: string;
    /**
     * When a value is lesser than it's supposed to be (inclusive)
     * @variables This key takes one variable: The minimum
     */
    error_minimum_incl: string;
    /**
     * When a value have too many characters
     * @variables This key takes one variable: The maximum character count
     */
    error_maxLength: string;
    /**
     * When a value does not have enough characters
     * @variables This key takes one variable: The minimum character count
     */
    error_minLength: string;
    /**
     * When a value does not match a given pattern
     */
    error_pattern: string;
    /**
     * When an array has additional items whereas it is not supposed to
     */
    error_additionalItems: string;
    /**
     * When there are to many items in an array
     * @variables This key takes one variable: The maximum item count
     */
    error_maxItems: string;
    /**
     * When there are not enough items in an array
     * @variables This key takes one variable: The minimum item count
     */
    error_minItems: string;
    /**
     * When an array is supposed to have unique items but has duplicates
     */
    error_uniqueItems: string;
    /**
     * When there are too many properties in an object
     * @variables This key takes one variable: The maximum property count
     */
    error_maxProperties: string;
    /**
     * When there are not enough properties in an object
     * @variables This key takes one variable: The minimum property count
     */
    error_minProperties: string;
    /**
     * When a required property is not defined
     * @variables This key takes one variable: The name of the missing property
     */
    error_required: string;
    /**
     * When there is an additional property is set whereas there should be none
     * @variables This key takes one variable: The name of the additional property
     */
    error_additional_properties: string;
    /**
     * When a dependency is not resolved
     * @variables This key takes one variable: The name of the missing property for the dependency
     */
    error_dependency: string;
    /**
     * When a date is in incorrect format
     * @variables This key takes one variable: The valid format
     */
    error_date: string;
    /**
     * When a time is in incorrect format
     * @variables This key takes one variable: The valid format
     */
    error_time: string;
    /**
     * When a datetime-local is in incorrect format
     * @variables This key takes one variable: The valid format
     */
    error_datetime_local: string;
    /**
     * When a integer date is less than 1 January 1970
     */
    error_invalid_epoch: string;
    /**
     * When an IPv4 is in incorrect format
     */
    error_ipv4: string;
    /**
     * When an IPv6 is in incorrect format
     */
    error_ipv6: string;
    /**
     * When a hostname is in incorrect format
     */
    error_hostname: string;
    /**
     * Text on Delete All buttons
     */
    button_delete_all: string;
    /**
     * Title on Delete All buttons
     */
    button_delete_all_title: string;
    /**
    * Text on Delete Last buttons
    * @variable This key takes one variable: The title of object to delete
    */
    button_delete_last: string;
    /**
    * Title on Delete Last buttons
    * @variable This key takes one variable: The title of object to delete
    */
    button_delete_last_title: string;
    /**
    * Title on Add Row buttons
    * @variable This key takes one variable: The title of object to add
    */
    button_add_row_title: string;
    /**
    * Title on Move Down buttons
    */
    button_move_down_title: string;
    /**
    * Title on Move Up buttons
    */
    button_move_up_title: string;
    /**
    * Title on Object Properties buttons
    */
    button_object_properties: string;
    /**
    * Title on Delete Row buttons
    * @variable This key takes one variable: The title of object to delete
    */
    button_delete_row_title: string;
    /**
    * Title on Delete Row buttons, short version (no parameter with the object title)
    */
    button_delete_row_title_short: string;
    /**
    * Title on Copy Row buttons, short version (no parameter with the object title)
    */
    button_copy_row_title_short: string;
    /**
    * Title on Collapse buttons
    */
    button_collapse: string;
    /**
    * Title on Expand buttons
    */
    button_expand: string;
    /**
    * Title on Flatpickr toggle buttons
    */
    flatpickr_toggle_button: string;
    /**
    * Title on Flatpickr clear buttons
    */
    flatpickr_clear_button: string;
    /**
    * Choices input field placeholder text
    */
    choices_placeholder_text: string;
    /**
    * Default title for array items
    */
    default_array_item_title: string;
    /**
    * Warning when deleting a node
    */
    button_delete_node_warning: string;
  };
};
export interface Options {
  upload: Function
  prompt_before_delete: boolean,
  use_default_values: boolean,
  max_depth: number
}
export interface Defaults {
  options: Options,
  theme: string,
  template: string,
  themes: { [key: string]: AbstractTheme },
  callbacks: any,
  templates: { [key: string]: Function },
  iconlibs: { [key: string]: AbstractIconLib },
  editors: { [key: string]: AbstractEditor },
  languages: Languages,
  resolvers: ((schema: Object) => string)[],
  custom_validators: Function[],
  default_language: string,
  language: string,
  translate: (key: string, variables: string[]) => string
}
export interface IconlibMapping {
  collapse: string
  expand: string
  delete: string
  edit: string
  add: string
  cancel: string
  save: string
  moveup: string
  movedown: string
}
declare class AbstractEditor {
  /**
   *
   * @param {Object} options
   * @param {Defaults} defaults
   */
  constructor(options: Object, defaults: Defaults);
  defaults: Defaults;
  /** @type { JSONEditor } */
  jsoneditor: JSONEditor;
  theme: any;
  template_engine: any;
  iconlib: any;
  translate: any;
  original_schema: any;
  schema: any;
  /** @type {boolean} */
  active: boolean;
  options: any;
  path: any;
  formname: any;
  parent: any;
  key: any;
  link_watchers: any[];
  watchLoop: boolean;
  onChildEditorChange(editor: any): void;
  notify(): void;
  change(): void;
  onChange(bubble: any): void;
  register(): void;
  unregister(): void;
  getNumColumns(): number;
  isActive(): boolean;
  activate(): void;
  deactivate(): void;
  registerDependencies(): void;
  dependenciesFulfilled: any;
  evaluateDependencies(): void;
  checkDependency(path: any, choices: any): void;
  setContainer(container: any): void;
  container: any;
  setOptInCheckbox(header: any): void;
  optInCheckbox: HTMLInputElement | undefined;
  preBuild(): void;
  build(): void;
  postBuild(): void;
  setupWatchListeners(): void;
  watched: {} | null | undefined;
  watched_values: {} | null | undefined;
  watch_listener: (() => void) | null | undefined;
  header_template: any;
  addLinks(): void;
  link_holder: any;
  onMove(): void;
  getButton(text: any, icon: any, title: any): any;
  setButtonText(button: any, text: any, icon: any, title: any): any;
  addLink(link: any): void;
  getLink(data: any): any;
  refreshWatchedFieldValues(): boolean | undefined;
  getWatchedFieldValues(): {} | null | undefined;
  updateHeaderText(): void;
  getHeaderText(titleOnly: any): any;
  cleanText(txt: any): string;
  onWatchedFieldChange(): void;
  header_text: any;
  setValue(value: any): void;
  value: any;
  getValue(): any;
  refreshValue(): void;
  getChildEditors(): boolean;
  destroy(): void;
  isDefaultRequired(): any;
  getDefault(): any;
  getTitle(): any;
  enable(): void;
  disabled: boolean | undefined;
  disable(): void;
  isEnabled(): boolean;
  isRequired(): any;
  getDisplayText(arr: any): any[];
  getValidId(id: any): any;
  setInputAttributes(inputAttribute: any): void;
  expandCallbacks(scope: any, options: any): any;
  showValidationErrors(errors: any): void;
}
export class JSONEditor {
  /**
   *
   * @param {HTMLElement} element
   * @param {*} options
   */
  constructor(element: HTMLElement, options?: any);
  element: HTMLElement;
  options: any;
  ready: boolean;
  copyClipboard: any;
  schema: any;
  template: any;
  translate: any;
  uuid: number;
  /**
   * @private
   */
  private __data;
  theme: any;
  iconlib: any;
  root_container: any;
  expandSchema: (schema: any, fileBase: any) => any;
  expandRefs: (schema: any, fileBase: any) => any;
  refs: any;
  validator: Validator;
  root: any;
  validation_results: any;
  getValue(): any;
  setValue(value: any): JSONEditor;
  validate(value: any, ...args: any[]): any;
  destroy(): void;
  destroyed: boolean | undefined;
  on(event: any, callback: any): JSONEditor;
  callbacks: any;
  off(event: any, callback: any): JSONEditor;
  trigger(event: any, editor: any): JSONEditor;
  setOption(option: any, value: any): JSONEditor;
  getEditorsRules(): any;
  getEditorClass(schema: any): AbstractEditor;
  createEditor(editorClass: any, options: any, depthCounter?: number): any;
  onChange(): JSONEditor | undefined;
  firing_change: boolean | undefined;
  compileTemplate(template: any, name?: string): any;
  /**
   * @private
   */
  private _data;
  registerEditor(editor: any): JSONEditor;
  editors: any;
  unregisterEditor(editor: any): JSONEditor;
  /**
   *
   * @param {string} path
   */
  getEditor(path: string): any;
  /**
   *
   * @param {string} path
   * @param {Function} callback
   */
  watch(path: string, callback: Function): JSONEditor;
  watchlist: any;
  /**
   *
   * @param {string} path
   * @param {Function|undefined} callback
   */
  unwatch(path: string, callback: Function | undefined): JSONEditor;
  /**
   *
   * @param {string} path
   */
  notifyWatchers(path: string): JSONEditor | undefined;
  /**
   * @returns {boolean}
   */
  isEnabled(): boolean;
  enable(): void;
  disable(): void;
  setCopyClipboardContents(value: any): void;
  getCopyClipboardContents(): any;
  /**
   *
   * @param {string} themeName
   * @param {*} rules
   */
  addNewStyleRules(themeName: string, rules: any): void;
  /**
   *
   * @param {string} themeName
   * @param {*} rules
   * @param {*} shadowRoot
   */
  addNewStyleRulesToShadowRoot(themeName: string, rules: any, shadowRoot: any): void;
}
export namespace JSONEditor {
  export { defaults };
  export { AbstractEditor };
  export { AbstractTheme };
  export { AbstractIconLib };
}

export { };
